---
import Layout from "../../lib/layouts/Layout.astro";
import Sidebar from "../../lib/components/common/Sidebar.astro";
import SidebarProject from "../../lib/components/common/SidebarProject.astro";
import Content from "../../lib/components/common/Content.astro";
import { TProject } from "../../lib/types/TProject";

import { PROJECTS } from '../../lib/data'

interface Props {
    currentProject?: TProject;
}

const { currentProject } = Astro.props;
---

<Layout title={`Haydn Comley - ${ currentProject ? currentProject.name : 'Portfolio' }`}>
	<main class="app red">
        <div class="sidebars">
            <input type="checkbox" id="sidebar" transition:persist>
            <Sidebar style="darker">
                <label class="sidebarClose" for="sidebar">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M9.4 278.6c-12.5-12.5-12.5-32.8 0-45.3l128-128c9.2-9.2 22.9-11.9 34.9-6.9s19.8 16.6 19.8 29.6l0 256c0 12.9-7.8 24.6-19.8 29.6s-25.7 2.2-34.9-6.9l-128-128z"/></svg>
                </label>
            </Sidebar>
            <Sidebar style="dark">
                <div>
                    { PROJECTS.map((project) => (
                        <SidebarProject project={project} isActive={currentProject?.slug === project.slug}></SidebarProject>
                    )) }
                </div>
            </Sidebar>
        </div>

        <div class="content">
            <Content blocks={currentProject?.blocks ?? []}></Content>
        </div>
	</main>
</Layout>

<style lang="scss" define:vars={currentProject?.theme ? {
        'theme-primary': `var(--theme-${currentProject.theme})`,
        'theme-primary-contrast': `var(--theme-${currentProject.theme}-contrast)`,
        'theme-primary-rgb': `var(--theme-${currentProject.theme}-rgb)`,
        'theme-primary-contrast-rgb': `var(--theme-${currentProject.theme}-contrast-rgb)`,
        'theme-primary-dark': `var(--theme-${currentProject.theme}-dark)`,
        'theme-primary-darker': `var(--theme-${currentProject.theme}-darker)`,
} : {}}>
    @use "easy-theme" as theme;

    .app {
        display: flex;
        height: 100%;
        width: 100%;
        overflow: hidden;
        background-color: theme.Color('primary');
        color: theme.Contrast('primary');
        border: theme.Variable('border');
        box-sizing: border-box;

        @include theme.Mobile {
            flex-direction: column;
        }
    }

    .sidebars {
        display: flex;
        z-index: 1;
        position: relative;

        @include theme.NotMobile {
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            height: 100%;
            border-left: theme.Variable('border');
            border-top: theme.Variable('border');
            border-bottom: theme.Variable('border');
            box-sizing: border-box;
        }

        @include theme.Mobile {
            flex-direction: column;
        }

        input {
            display: none;
        }

        &::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: calc(100vw - (theme.Variable('border-thickness') * 2));
            height: calc(100vh - (theme.Variable('border-thickness') * 2));
            background: theme.Color('primary', 'darker');
            opacity: 0;
            pointer-events: none;
            z-index: -2;
            transition: .5s ease-out;
        }

        &:has(:checked) {
            &::after {
                opacity: 0.8;
                pointer-events: all;
            }
        }
    }

    .sidebarClose {
        padding: theme.Variable('spacing');
        height: calc(theme.Variable('spacing') * 1.5);
        width: calc(theme.Variable('spacing') * 1.5);
        display: flex;
        align-items: center;
        justify-content: center;
        fill: theme.Contrast('primary');
        cursor: pointer;
        transform-origin: 50% 50%;
        transition: .15s ease;

        -webkit-tap-highlight-color: transparent;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        
        svg {
            transition: .15s ease;
        }

        @include theme.NotMobile {
            &:hover {
                transform: scale(0.8);
            }
        }

        @include theme.Mobile {
            padding: calc(theme.Variable('spacing') * 1) theme.Variable('spacing');
            border-right: theme.Variable('border');
            border-bottom: none;
            background: theme.Color('primary', 'dark');
            
            svg {
                transform: rotateZ(90deg) translateX(.1rem);
            }
        }
    }

    .content {
        display: flex;
        width: 100%;
        height: 100%;

        @include theme.NotMobile {
            margin-left: calc((theme.Variable('border-thickness') * 2) + theme.Variable('spacing') * 7);
        }
    }

    #sidebar:not(:checked) ~ :global(*) > .sidebarClose {
        svg {
            transform: rotateZ(180deg) translateX(.1rem);

            @include theme.Mobile {
                transform: rotateZ(270deg) translateX(.1rem);
            }
        }
    }
</style>